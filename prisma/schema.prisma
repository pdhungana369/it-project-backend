generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid()) @db.Uuid
  name        String?
  email       String?   @unique
  password    String?
  role        ROLE      @default(USER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  cartId      String?   @unique @db.Uuid
  phoneNumber String?
  productId   String?
  cart        Cart?
  order       Order[]
  Product     Product[]
}

model Category {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  product     Product[]
}

model Product {
  id             String      @id @default(uuid()) @db.Uuid
  code           String?
  name           String
  descriptions   String
  price          Float?
  categoryId     String      @db.Uuid
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  outOfStock     Boolean     @default(false)
  userId         String?     @db.Uuid
  stockCount  Int @default(10)
  imageUrl       String?
  isFreeDelivery Boolean     @default(false)
  CartItem       CartItem[]
  OrderItem      OrderItem[]
  category       Category    @relation(fields: [categoryId], references: [id])
  User           User?       @relation(fields: [userId], references: [id])
}

model Cart {
  id          String     @id @default(uuid()) @db.Uuid
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  totalAmount Float      @default(0)
  userId      String?    @unique @db.Uuid
  user        User?      @relation(fields: [userId], references: [id])
  CartItem    CartItem[]
}

model CartItem {
  id         String   @id @default(uuid()) @db.Uuid
  quantity   Int      @default(1)
  productId  String?  @db.Uuid
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  totalPrice Float
  cartId     String   @db.Uuid
  cart       Cart     @relation(fields: [cartId], references: [id])
  product    Product? @relation(fields: [productId], references: [id])
}

model Order {
  id          String       @id @default(uuid()) @db.Uuid
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  status      OrderStatus  @default(PENDING)
  userId      String       @db.Uuid
  orderId     String?
  totalAmount String?
  User        User         @relation(fields: [userId], references: [id])
  OrderItem   OrderItem[]
  recipientAddress String?
  recipientName String?
  recipientPhoneNumber String?
}

model OrderItem {
  id        String   @id @default(uuid()) @db.Uuid
  quantity  Int      @default(1)
  orderId   String   @db.Uuid
  productId String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

enum ROLE {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  DISPATCHED
  COMPLETED
  CANCELED
}
